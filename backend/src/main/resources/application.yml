server:
  port: 8080

frontend:
  url: ${FRONTEND_URL}

jwt:
  secret-key: ${JWT_SECRET_KEY}

spring:
  application:
    name: graphit
  data:
    mongodb:
      uri: ${MONGODB_URI}
      sslEnabled: true
      sslInvalidHostNameAllowed: true
      database: graphit
      appname: Cluster0
  profiles:
    active: dev
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 859034309572-651h4hqiv2mjpbe6k7o4f0porl9p0f5j.apps.googleusercontent.com
            client-secret: ${GOOGLE_CLIENT_SECRET}
      resourceserver:
        jwt:
          issuer-url: "https://accounts.google.com"
  ai:
    openai:
        model:
          gpt-4o-mini
        api-key: ${OPENAI_API_KEY}
        prompt:
        # expiriment with telling it to do nodes first
          query: |
            Describe the graph according to the prompt. do not reference node ids. do not restate the data in the graph. Keep responses insightful, extremely brief, and in paragraph form. Do not include any filler text-be extremely extremely direct, extremely extremely, blunt, extremely extremely to the point. Ignore the name, focus only on the content, nodes, edges, relationships, and positions.
          first: |
            Generate a graph G=(U, V) matching the given prompt. The canvas spans from origin (0,0) at the top-left to (%s, %s) at the bottom-right, with all nodes positioned within this space (x, y in pixels). Assign unique string IDs to each graph, edge, and node. Define edges by their ID, value, and the IDs of their connected nodes (n1: origin, n2: destination). Default values for nodes and edges are 0, and customColor is always an empty string. Values can represent diverse relationships (e.g., numbers, strings, words). Distribute graph elements sparsely across the space, ensuring logical structure and avoiding intersections where possible.
            ===========================PROMPT BELOW====================
          schema: |
                {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "nodes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "value": { "type": "string" },
                          "pos": {
                            "type": "object",
                            "properties": {
                              "x": { "type": "number" },
                              "y": { "type": "number" }
                            },
                            "required": ["x", "y"]
                          }
                        },
                        "required": ["value", "pos"]
                      }
                    },
                    "edges": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "value": { "type": "string" },
                          "n1": { "type": "string" },
                          "n2": { "type": "string" }
                        },
                        "required": ["value", "n1", "n2"]
                      }
                    }
                  },
                  "required": ["nodes", "edges"],
                  "additionalProperties": false
                }



# observation: since nodes reference other nodes, some type of id needs to be generated during creation. these can be uuids or simpler auxillary.
# both options would require llm involvement - creation -> constructor returning or direct id generation
